
1.Select all warehouses.
select * from warehouses;

2.Select all boxes with a value larger than 150.
select * from boxes where value > 150

3.Select all distinct contents in all the boxes.
  ('contents' is a column name)
select distinct contents from Boxes;

>> also valid:
select distinct(Code) from boxes; -- for one column

-- import distinct content into a new table boxes_distinct

CREATE TABLE boxes_distinct (
    Code CHAR(4) NOT NULL,
    Contents VARCHAR(255) NOT NULL ,
    Value REAL NOT NULL ,
    Warehouse INTEGER NOT NULL,
    PRIMARY KEY (Code),
    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)
 )

select * from boxes
union
select * from boxes_distinct;

the statement is:
select * from boxes union select * from boxes_distinct;




4.Select the average value of all the boxes.
select AVG(value)from boxes;
>17.72727272...

5.Select the warehouse code and the average value of the boxes in each warehouse.
select AVG(value)from boxes group by warehouse;

6.Create a new warehouse in New York with a capacity for 3 boxes.
INSERT INTO Warehouses(Code,Location,Capacity) VALUES(6,'New York',3);

7.Create a new box, with code "H5RT", containing "Papers" with a value of 200,
and located in warehouse 6
INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('H5RT','Papers',200,6);


8.Reduce the value of all boxes by 0.85.
update boxes set value=value*0.85


>>> Reference
>>> Apply a 10% discount to all products.
>>> update products set price=price*0.9;

>>> Apply a 10% discount to all products with a price larger than or equal to 120.
>>> update products set price=price*0.9 where price>=120;



9.Remove all boxes with a value lower than 100.
    select * from boxes where value > 100

delete from boxes where value > 100;



join (joining condition boxes.Warehouse = Warehouses.Code)
    Warehouses(Code,Location,Capacity) VALUES(1,'Chicago',3);
    Boxes(Code,Contents,Value,Warehouse) VALUES('0MN7','Rocks',180,3);

10. Select the code of each box, along with the name of the city the box is located in.
select Boxes.Code,Location from Warehouses inner join boxes on warehouses.code = boxes.warehouse


11. Select the codes of all the boxes located in Chicago
// both valid
select boxes.code from boxes join warehouses on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago'
select boxes.code, warehouses.location from boxes join warehouses on warehouses.code = boxes.warehouse where warehouses.location = 'Chicago'

** one more question below


++++++++++++++++++++
answers

1.Select all warehouses.
select * from warehouses;

2.Select all boxes with a value larger than 150.
select * from boxes where Value>150;

3.Select all distinct contents in all the boxes.
select distinct contents from boxes;

4.Select the average value of all the boxes.
select avg(value) from boxes;

5.Select the warehouse code and the average value of the boxes in each warehouse.
SELECT Warehouse, AVG(Value)
    FROM Boxes
GROUP BY Warehouse;

6.Create a new warehouse in New York with a capacity for 3 boxes.
 INSERT INTO Warehouses VALUES (6, 'New York', 3);
 
7.Create a new box, with code "H5RT", containing "Papers" with a value of 200, and located in ware
 INSERT INTO Boxes VALUES('H5RT', 'Papers', 200, 2);
 
8.Reduce the value of all boxes by 0.85.
 update boxes
set value = value * 0.85;

9.Remove all boxes with a value lower than 100.
delete from boxes 
where value < 100;
join (joining condition boxes.Warehouse = Warehouses.Code)
1. Select the code of each box, along with the name of the city the box is located in.

SELECT Boxes.Code, Location
      FROM Warehouses 
INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse;


2. Select the codes of all the boxes located in Chicago.
select Boxes.code 
from boxes join Warehouses
on boxes.warehouse = warehouses.code
where warehouses.location = 'Chicago';

++++++++++++++++++++++++++++++++
joins extra practice
++++++++++++++++++++++++++++++++

Select all the data from the products, including all the data for each product's manufacturer.

Select the product name, price, and manufacturer name of all the products.
(inner join)

condition (products.manufacturer = Manufacturers.code)
CREATE TABLE Manufacturers (
  Code INTEGER,
  Name VARCHAR(255) NOT NULL,
  PRIMARY KEY (Code)   
);

CREATE TABLE Products (
  Code INTEGER,
  Name VARCHAR(255) NOT NULL ,
  Price DECIMAL NOT NULL ,
  Manufacturer INTEGER NOT NULL,
  PRIMARY KEY (Code), 
  FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code)
)
INSERT INTO Manufacturers(Code,Name) VALUES(1,'Sony');
INSERT INTO Manufacturers(Code,Name) VALUES(2,'Creative Labs');
INSERT INTO Manufacturers(Code,Name) VALUES(3,'Hewlett-Packard');
INSERT INTO Manufacturers(Code,Name) VALUES(4,'Iomega');
INSERT INTO Manufacturers(Code,Name) VALUES(5,'Fujitsu');
INSERT INTO Manufacturers(Code,Name) VALUES(6,'Winchester');
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(1,'Hard drive',240,5);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(2,'Memory',120,6);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(3,'ZIP drive',150,4);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(4,'Floppy disk',5,6);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(5,'Monitor',240,1);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(6,'DVD drive',180,2);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(7,'CD drive',90,2);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(8,'Printer',270,3);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(9,'Toner cartridge',66,3);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(10,'DVD burner',180,2);



-- 1.10 Select all the data from the products, including all the data for each product's manufacturer.
select a.*, b.name from products a join Manufacturers b on(a.manufacturer = b.code);
select a.*, b.name from products a, Manufacturers b where a.manufacturer = b.code;

-- 1.11 Select the product name, price, and manufacturer name of all the products.
select a.name, a.price, b.name from products a join Manufacturers b on(a.manufacturer = b.code);







